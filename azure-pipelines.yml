name: $(PackageVersion).$(VersionBuildNumber)

schedules:
- cron: "0 1 * * *"
  displayName: Nightly
  branches:
    include: 
    - master
  always: true

trigger:
  batch: true
  branches:
    include:
    - master
pr:
  branches:
    include:
    - '*'
  paths:
    exclude:
    - 'docs/*'
    - '.github/*'
  
variables:
  PackageVersion: '0.18.0'
  VersionBuildNumber: $[counter('0.18.0', 1)]
  IntegrationTestVersion: $(PackageVersion)-alpha.$(VersionBuildNumber)
  ProjectsToPack: src/Stryker.Core/Stryker.Core/Stryker.Core.csproj;src/Stryker.CLI/Stryker.CLI/Stryker.CLI.csproj
  MygetFeed: https://www.myget.org/F/stryker-mutator-integrationtest
  AzureArtifactFeedUri: https://pkgs.dev.azure.com/stryker-mutator/Stryker/_packaging/stryker-net/nuget/v3/index.json
  MygetFeedUri: https://www.myget.org/F/stryker-mutator-integrationtest/api/v3/index.json
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
  LibManCacheWindows: $(USERPROFILE)/.librarymanager/cache
  LibManCacheMacLinux: $(HOME)/.librarymanager/cache
  RestoreLockedMode: true

pool:
  vmImage: 'windows-latest'

stages:
- template: pipeline-templates/update-package-lock-files-stage.yml

- stage: Analysis
  dependsOn: UpdatePackageLockFiles
  jobs:
  - job:
    displayName: Run Sonar Analysis
    condition: and(not(failed()), eq(variables['System.PullRequest.IsFork'], 'False'))
    dependsOn: []
    steps:
    - template: pipeline-templates/populate-cache-steps.yml
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'SonarCloud stryker-net'
        organization: 'stryker-net'
        scannerMode: 'MSBuild'
        projectKey: 'stryker-net'
        projectName: 'Stryker .NET'
        projectVersion: '$(PackageVersion)'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: 'src/Stryker.CLI/Stryker.CLI.sln'
    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests'
      inputs:
        command: test
        projects: 'src/Stryker.Core/Stryker.Core.UnitTest/Stryker.Core.UnitTest.csproj'
        arguments: '--logger trx --results-directory $(Agent.TempDirectory) --collect "Code coverage"'
        publishTestResults: false
    - task: SonarCloudAnalyze@1
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
  - job: RunStrykerCLI
    displayName: Run stryker on Stryker.CLI
    dependsOn: []
    timeoutInMinutes: 240
  - template: pipeline-templates/stryker-on-stryker-job.yml
    parameters:
      projectName: 'Stryker.CLI'
      workingDirectory: 'src\Stryker.CLI\Stryker.CLI.UnitTest'
  - template: pipeline-templates/stryker-on-stryker-job.yml
    parameters:
      projectName: 'Stryker.Core'
      workingDirectory: 'src\Stryker.Core\Stryker.Core.UnitTest'

- stage: DeployIntegrationtestPackage
  displayName: Deploy Integrationtest Package
  dependsOn: UpdatePackageLockFiles
  condition: not(failed())
  jobs:
  - deployment: PublishIntegrationTestPackage
    displayName: Prepare integrationtest package
    environment: 'myget'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - template: pipeline-templates/populate-cache-steps.yml
          - task: DotNetCoreCLI@2
            displayName: 'Restore vstest binaries'
            inputs:
              command: 'custom'
              custom: 'restore'
              arguments: '--packages ./.vstest/'
              workingDirectory: 'src/Stryker.Core/Stryker.Core/ToolHelpers/'
          - task: DotNetCoreCLI@2
            displayName: 'Pack integrationtest packages'
            inputs:
              command: pack
              versioningScheme: byEnvVar
              versionEnvVar: IntegrationTestVersion
              packagesToPack: $(ProjectsToPack)
              packDirectory: $(Build.ArtifactStagingDirectory)/integrationtest
              includesymbols: true
          - task: DotNetCoreCLI@2
            displayName: 'Publish integrationtest packages'
            condition: eq(variables['System.PullRequest.IsFork'], 'True')
            inputs:
              command: custom
              custom: 'nuget'
              arguments: 'push *dotnet-stryker*$(IntegrationTestVersion).nupkg -s $(MygetFeed) -k $(IntegrationTestFeedKey)'
              workingDirectory: '$(Build.ArtifactStagingDirectory)/integrationtest'
          - task: DotNetCoreCLI@2
            displayName: 'Publish integrationtest packages'
            condition: eq(variables['System.PullRequest.IsFork'], 'False')
            inputs:
              command: 'push'
              packagesToPush: '$(Build.ArtifactStagingDirectory)/integrationtest/*$(IntegrationTestVersion).nupkg'
              nuGetFeedType: 'internal'
              publishVstsFeed: '506a1f46-900e-434e-805f-ff8d36fc81af/cc8fa47b-395f-417d-8b3d-72618b95ddb8'
  - job: WaitOnMyGetProcessing
    displayName: Wait on pre-release packages to be processed on MyGet
    dependsOn: 'PublishIntegrationTestPackage'
    pool: server
    steps:
    - task: Delay@1
      inputs:
        delayForMinutes: '1'

- stage: IntegrationTests 
  dependsOn: 
    - Analysis
    - DeployIntegrationtestPackage
  condition: not(failed())
  jobs:
  - job: WindowsTests
    displayName: Run tests on Windows
    steps:
    - task: NuGetToolInstaller@0
      displayName: 'Install nuget for stryker full framework'
    - template: pipeline-templates/prepare-integration-test-steps.yml
    - template: pipeline-templates/run-integration-test-steps.yml
      parameters:
        testName: 'windows-netcore'
        workingDirectory: 'integrationtest/TargetProjects/NetCoreTestProject.XUnit'
    - template: pipeline-templates/run-integration-test-steps.yml
      parameters:
        testName: 'windows-netframework'
        workingDirectory: 'integrationtest/TargetProjects/NetFramework/FullFrameworkApp.Test'
    - task: DotNetCoreCLI@2
      displayName: 'Assert integration test results'
      inputs:
        command: test
        projects: '**/Validation.csproj'
        arguments: --filter Traits=SingleTestProject

  - job: LinuxTests
    displayName: Run tests on Linux
    pool:
      vmImage: ubuntu-latest
    steps:
    - template: pipeline-templates/prepare-integration-test-steps.yml
    - template: pipeline-templates/run-integration-test-steps.yml
      parameters:
        testName: 'linux-netcore'
        workingDirectory: 'integrationtest/TargetProjects/NetCoreTestProject.XUnit'
    - task: DotNetCoreCLI@2
      displayName: 'Assert integration test results'
      inputs:
        command: test
        projects: '**/Validation.csproj'
        arguments: --filter Traits=SingleTestProject

  - job: MacOsTests
    displayName: Run tests on Mac OS
    pool:
      vmImage: macOS-latest
    steps:
    - template: pipeline-templates/prepare-integration-test-steps.yml
    - template: pipeline-templates/run-integration-test-steps.yml
      parameters:
        testName: 'macos-netcore'
        workingDirectory: 'integrationtest/TargetProjects/NetCoreTestProject.XUnit'
    - task: DotNetCoreCLI@2
      displayName: 'Assert integration test results'
      inputs:
        command: test
        projects: '**/Validation.csproj'
        arguments: --filter Traits=SingleTestProject
    - template: pipeline-templates/run-integration-test-steps.yml
      parameters:
        testName: 'macos-netcore-multi-test-project'
        workingDirectory: 'integrationtest/TargetProjects/TargetProject'
        strykerCommands: --test-projects "['../NetCoreTestProject.XUnit/NetCoreTestProject.XUnit.csproj', '../NetCoreTestProject.NUnit/NetCoreTestProject.NUnit.csproj']"
    - task: DotNetCoreCLI@2
      displayName: 'Assert integration test results'
      inputs:
        command: test
        projects: '**/Validation.csproj'
        arguments: --filter Traits=MultipleTestProjects

- stage: PublishReleaseArtifact
  displayName: Publish Release Artifact
  dependsOn: 
    - Analysis
    - IntegrationTests
  condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
  jobs:
  - job: PublishRelease
    displayName: Publish Release Artifacts
    steps:
    - template: pipeline-templates/populate-cache-steps.yml
    - task: DotNetCoreCLI@2
      displayName: 'Restore vstest binaries'
      inputs:
        command: 'custom'
        custom: 'restore'
        arguments: '--packages ./.vstest/'
        workingDirectory: 'src/Stryker.Core/Stryker.Core/ToolHelpers/'
    - task: DotNetCoreCLI@2
      displayName: 'Pack release package'
      inputs:
        command: pack
        packagesToPack: $(ProjectsToPack)
        packDirectory: $(Build.ArtifactStagingDirectory)/release
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: release'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/release'
        ArtifactName: release
